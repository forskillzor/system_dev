
*******************************************************************
            Multiboot спецификация. версия 0.6.96
*******************************************************************
перевод  Sergey Orlov


*******************************************************************
Copyright c 1995,96 Bryan Ford <baford@cs.utah.edu>
Copyright c 1995,96 Erich Stefan Boleyn <erich@uruk.org>
Copyright c 1999,2000,2001,2002,2005,2006,2009 Free Software Foundation, Inc.
Permission is granted to make and distribute verbatim copies of this manual
provided the copyright notice and this permission notice are preserved on all
copies.
Permission is granted to copy and distribute modified versions of this manual
under the conditions for verbatim copying, provided also that the entire result-
ing derived work is distributed under the terms of a permission notice identical
to this one.
Permission is granted to copy and distribute translations of this manual into
another language, under the above conditions for modified versions.
*******************************************************************

Содержание

1. Введение в спецификацию multiboot
  1.1 Пердпосылки Мильтизагрузочной спецификации.
  1.2 Целевая архитектура.
  1.3 Целевая операционная система.
  1.4 Источники загрузки (boot sources).
  1.5 Конфигурирование операционной системы на этапе загрузки.
  1.6 Как сделать процесс разработки операционной системы легче.
  1.7 Загрузочные модули.

2. Определения и термины используемые в спецификации.

3. Точные определения спецификации Muliboot.
  3.1 Формат образа операционной системы.
    3.1.1 Расположение заголовков.
    3.1.2 Магические поля заголовков.
    3.1.3 Адрессные поля заголовков.
    3.1.4 Графические поля заголовков.
  3.2 Состояние машины.
  3.3 Формат загрузочной информации.

4. Примеры.
  4.1 Записи в PC.
  4.2 BIOS техника создания карты устройств
    4.2.1 Техника сравнения данных
    4.2.2 Техника ограничения ввода / вывода
  4.3 Пример кода ОС
    4.3.1 multiboot.h
    4.3.2 boot.S
    4.3.3 kernel.c
    4.3.4 другие ядра Multiboot
  4.4 Пример кода загрузчика

5. Журнал изменений этой спецификации.




        1. Введение в спецификацию Multiboot.

  В этой главе описывается приблизительная информация о спецификации
мультизагрузки. Обратите внимание, что это не является частью самой
спецификации.

  1.1 Пердпосылки Мильтизагрузочной спецификации.

Каждая операционная система, когда-либо созданная, имеет свой собственный
загрузчик. Установка новой операционной системы на машине обычно включает
в себя установку совершенно нового набора загрузочных механизмов, каждый
из которых имеет совершенно разные пользовательские интерфейсы во время
установки и загрузки. Получение нескольких операционных систем для
надежного сосуществования на одной машине через типичные цепочечные
механизмы могут быть кошмаром. Существует мало, если вообще есть,
загрузчиков для конкретной операционной системы, а если тот, который
поставляется с операционной системой, не работает так как вы хотите,
или не работает на вашей машине, вы облажались.  

Хотя мы не сможем решить эту проблему в существующих проприетарных
операционных системах, однако, это не должно быть слишком сложно для
некоторых людей в сообществах свободных операционных систем собраться
воедино и решить эту проблему для популярных бесплатных операционных
систем. Вот для чего предназначена эта спецификация. В основном, она
определяет интерфейс между загрузкой загрузчика и операционной системой,
так что любой соответствующий загрузчик должен иметь возможность загрузить
любую соответствующую операционную систему. В этой спецификации не указано,
как загрузчики должны работать - только то, как они должны взаимодействовать 
с загружаемой операционной системой.


  1.2 Целевая архитектура.

  Эта спецификация в первую очередь предназначена для ПК, так как они
являются наиболее распространенными и имеют самое большое разнообразие
операционных систем и загрузчиков. Однако в той степени, в которой
другим архитектурам может потребоваться спецификация загрузки, а у вас
ее еще нет, вариант этой спецификации, лишенной специфических для x86
деталей, также может быть принята и для них.


  1.3 Целевая операционная система.

Эта спецификация предназначена для бесплатных 32-битных операционных
систем, которые могут быть довольно легко модифицировано для поддержки
спецификации без прохождения множества бюрократических проблем. Конкретные
бесплатные операционные системы, для которых эта спецификация в первую
очередь предназначена Linux, ядра FreeBSD и NetBSD, Mach и VSTa.
Есть надежда, что другие появляющиеся бесплатные операционные системы
примут его с самого начала и, таким образом, сразу смогут воспользоваться
существующими загрузчиками. Было бы неплохо, если бы производители проприетарных операционных систем в конечном итоге также приняли эту спецификацию,
но это, вероятно, несбыточная мечта.



  1.4 Источники загрузки (boot sources).

Должна быть возможность писать совместимые загрузчики, которые загружают
образ ОС из множества источников, в том числе дискеты, жесткие диски и
по сети.

Дисковые загрузчики могут использовать различные методы, чтобы найти
соответствующий образ ОС и данные загрузочного модуля на диске, например,
путем интерпретации конкретных файловых систем (например, Загрузчик BSD /
Mach) с использованием предварительно рассчитанных блочных списков
(например, LILO), загрузка из специального загрузочный раздел (например,
OS / 2) или даже загрузка из другой операционной системы (например VSTa
загрузочный код, который загружается из DOS). Аналогично, сетевые загрузчики могут использовать разнообразное сетевое оборудование и протоколы.

Есть надежда, что будут созданы загрузчики, поддерживающие несколько
загрузочных механизмов, увеличивая их мобильность, надежность и удобство
использования.


  1.5 Конфигурирование операционной системы на этапе загрузки.

Часто по той или иной причине пользователю необходимо предоставить
информацию о конфигурации в операционную систему динамически во время
загрузки. Хотя это спецификация не должна диктовать, как эта информация
о конфигурации получается загрузчиком, она должена предоставить
стандартное средство для загрузчика, чтобы передать такую информацию
операционной системе.


  1.6 Как сделать процесс разработки операционной системы легче.

Образы ОС должны легко генерироваться. В идеале образ ОС должен быть
просто обычным 32-разрядный исполняемый файл в любом формате, который 
обычно используется операционной системой. Должно быть возможным mn или 
дизассемблироваие образа ОС, как обычного исполняемого файла.
Для создания образов ОС в специальном формате файлов не требуется
специальных инструментов. Если это означает смещение некоторой работы с
операционной системы на загрузчик, что вероятно уместно, потому что вся
память, используемая загрузчиком, как правило, снова становится
доступной после процесс загрузки, тогда как каждый бит кода в образе ОС
обычно должен остаться в памяти навсегда. Операционная система не должна
изначально беспокоиться о получении 32-битного режима, потому что код
переключения режима обычно должен быть в загрузчике в любом случае,
чтобы загрузить данные операционной системы свыше границы 1 МБ, вынуждая
операционную систему делать это значительно усложняет создание образов ОС.

  К сожалению, существует огромное разнообразие форматов исполняемых
файлов, даже среди бесплатных Unix-подобных операционных систем для ПК -
как правило, разные форматы для каждой операционной системы.  Большинство
соответствующих бесплатных операционных систем используют какой-то
вариант формата a.out, но некоторые переходят к ELF. Очень желательно,
чтобы загрузчики не имели возможности интерпретировать различные типы
существующих форматов исполняемых файлов, чтобы загрузить Образ ОС - в
противном случае загрузчик фактически снова становится зависимым от
операционной системы.

Эта спецификация принимает компромиссное решение этой проблемы.
Multiboot-совместимые образы ОС всегда содержат Magic заголовок
Multiboot (см. раздел 3.1 [ОС формат изображения], стр. 5), что позволяет
загрузчику загружать образ без необходимости понимать многочисленные
варианты a.out или другие исполняемые форматы. Этому Magic заголовоку
необязательно находиться в самом начале исполняемого файла, поэтому
образы ядра могут соответствовать локальному варианту формата a.out в
дополнение к совместимости с Multiboot.


  1.7 Загрузочные модули.


Многие современные ядра операционных систем, такие как Mach и микроядро
в VSTa, сами по себе не содержат достаточного количества механизмов,
чтобы обеспечить полную работоспособность системы: они требуют наличия
дополнительных программных модулей во время загрузки для доступа к
устройствам, монтирования файловых систем, и т.п.

  Хотя эти дополнительные модули могут быть встроены в основной образ ОС
вместе с самим ядром, а полученный образ может быть разделен на части
вручную операционной системой, когда она получает управление, он часто
является более гибким, более компактным и более удобным для операционной 
системы и пользователя, если загрузчик может загружать эти дополнительные
модули в первую очередь независимо.

  Таким образом, эта спецификация должна предоставлять стандартный метод
для загрузчика, чтобы указать операционной системе, какие вспомогательные
загрузочные модули были загружены и где их можно найти. Загрузчики не
должны поддерживать несколько загрузочных модулей, но настоятельно
рекомендуется, потому что некоторые операционные системы не смогут
загружаться без них.


  2. Определения и термины используемые в спецификации.

must - Мы используем термин должен (must), когда любой загрузчик или
    образ ОС должен следовать правилу - в противном случае, загрузчик
    или образ ОС не совместим с мультизагрузкой.

should - Мы используем этот термин, когда рекомендуется, чтобы любой
    загрузчик или образ ОС следовал правилу, но он не должен следовать
    правилу.

may - Мы используем термин возможно, когда любому загрузчику или образу
    ОС разрешено следовать правилу. 

boot loader - Без разницы программа или набор программ загружающая образ
    конечной операционной системы, которая будет запущена на машине.
    Сам загрузчик может состоять из нескольких этапов, но это деталь
    реализации, не относящаяся к данной спецификации. Только последний
    этап загрузчика - этап, который в конечном итоге передает управление
    операционной системе - должен соответствовать правилам, указанным в
    этом документе, для того, чтобы быть Multiboot-совместимым; более
    ранние этапы загрузчика могут быть разработаны любым удобным способом.

OS image - Начальный двоичный образ, который загрузчик загружает в память
    и передает управление для запуска операционной системы. Образ ОС
    обычно представляет собой исполняемый файл, содержащий ядро
    операционной системы.

boot moudule - Другие вспомогательные файлы, которые загрузчик загружает
    в память вместе с образом ОС, но никоим образом не интерпретируют,
    кроме передачи их местоположений в операционную систему, когда он
    вызывается.

Multiboot-compliant Загрузчик или образ ОС, соответствующий правилам,
    определенными как обязательные, совместим с мультизагрузкой. Когда в
    этой спецификации указывается правило, как должно или может быть,
    образ загрузчика / ОС, совместимый с Multiboot, не обязан следовать
    этому правилу.

u8 - тип 8 бит беззнаковый.
u16 - тип 16 бит беззнаковый.
u32 - тип 32 бита беззнаковый.
u64 - тип 64 бита беззнаковый.



        3. Точные определения спецификации Muliboot.
        
Существует три основных аспекта интерфейса загрузчика / образа ОС:

  1. Формат образа ОС, видимый загрузчиком. 
  2. Состояние машины, когда загрузчик запускает операционную систему. 
  3. Формат информации, передаваемой загрузчиком в операционную систему.


  3.1 Формат образа операционной системы.

Образ ОС может быть обычным 32-разрядным исполняемым файлом в стандартном
формате для этой конкретной операционной системы, за исключением того,
что он может быть связан по адресу загрузки не по умолчанию, чтобы
избежать загрузки поверх области ввода-вывода компьютера или другого
зарезервированного области, и, конечно, он не должен использовать общие
библиотеки или другие необычные функции.

Образ ОС должен содержать дополнительный заголовок, называемый заголовком
Multiboot, помимо заголовков формата, используемого образом ОС. Заголовок
мультизагрузки должен полностью содержаться в первых 8192 байтах образа
ОС и должен быть выровнен по длинному слову (32-разрядному). В общем,
это должно происходить как можно раньше и может быть встроено в начало
текстового сегмента после реального исполняемого заголовка.


    3.1.1 Расположение заголовков.

Расположение заголовка мультизагрузки должно быть следующим:

  Offset  Type   Field_name     Note
  __________________________________________________
  0       u32    magic          required
  4       u32    flags          required
  8       u32    checksum       required
  12      u32    header_addr    if flags[16] is set
  16      u32    load_addr      if flags[16] is set
  20      u32    load_end_addr  if flags[16] is set
  24      u32    bss_end_addr   if flags[16] is set
  28      u32    entry_addr     if flags[16] is set
  32      u32    mode_type      if flags[2] is set
  36      u32    width          if flags[2] is set
  40      u32    height         if flags[2] is set
  44      u32    depth          if flags[2] is set

Поля 'magic', 'flags' и 'checkum' определены в Разделе 3.1.2 
[magic поля заголовка], стр. 5, 

поля 'header_addr', 'load_addr',
'load_end_addr', 'bss_end_addr' и 'entry_addr' определены в разделе
3.1.3 [Поля адреса заголовка], стр. 6,

поля 'mode_type', 'width', 'height' и 'глубина' определены в разделе 3.1.4 [Графические поля заголовка], стр. 7.


    3.1.2 Магические поля заголовков.

"Magic". Поле "magic" - это магическое число, идентифицирующее заголовок,
которое должно быть шестнадцатеричным значением 0x1BADB002.

"Flags". Поле "flags" указывает функции, которые образ ОС запрашивает или
требует от загрузчика. Биты 0-15 указывают требования; если загрузчик
видит какой-либо из этих установленных битов, но не понимает флаг или не
может выполнить требования, которые он указывает по какой-либо причине,
он должен уведомить пользователя и не может загрузить образ ОС.
Биты 16-31 указывают на дополнительные функции; если установлены
какие-либо биты в этом диапазоне, но загрузчик не понимает их, он может
просто игнорировать их и продолжать как обычно. Естественно, все пока
еще неопределенные биты в слове «flags» должны быть установлены на ноль
в образах ОС. Таким образом, поля «флаги» служат для контроля версий,
а также для простого выбора функций.

  Если бит «0» в слове «flags» установлен, то все загрузочные модули
загружемые вместе с операционной системой должны быть выровнены по
границам страницы (4 КБ). Некоторые операционные системы ожидают, что
смогут отображать страницы, содержащие загрузочные модули, непосредственно
в адресное пространство с постраничной загрузкой во время запуска, и,
следовательно, необходимо, чтобы загрузочные модули были выровнены по
страницам.

  Если бит 1 в слове «flags» установлен, то должна быть включена
информация о доступной памяти по крайней мере через поля «mem_ *»
информационной структуры Multiboot (см. Раздел 3.3 [Формат информации о
загрузке], стр. 8). Если загрузчик способен передавать карту памяти
(поля «mmap_ *») и она существует, то она также может быть включена.

  Если установлен бит 2 в слове «flags», ядру должна быть доступна
информация о таблице режима видео (см. Раздел 3.3 [Формат информации о
загрузке], стр. 8). 
  Если бит 16 в слове 'flags' установлен, то поля со смещением 12-28 в
заголовке Multiboot являются действительными, и загрузчик должен
использовать их вместо полей в фактическом исполняемом заголовке,
чтобы вычислить, куда загрузить ОС образ. Эту информацию не нужно
предоставлять, если образ ядра находится в формате elf, но она должна
предоставляться, если образ имеет формат a.out или какой-либо
другой формат. Совместимые загрузчики должны иметь возможность загружать
образы в формате elf или содержать информацию об адресе загрузки,
встроенную в заголовок Multiboot; они также могут напрямую поддерживать
другие исполняемые форматы, такие как конкретные варианты a.out, но не
обязаны это делать.

"checksum". Поле "checksum" представляет собой 32-битное значение без знака,
которое при добавлении в другие magic поля (т. Е. «Magic» и «flags»)
должно иметь 32-битную сумму без знака, равную нулю.


    3.1.3 Адрессные поля заголовков.

Все поля адреса, включенные битом 16 флага, являются физическими адресами.
Значение каждого из них следующее:

header_addr
    Содержит адрес, соответствующий началу заголовка мультизагрузки
    - место в физической памяти, в которое предполагается загрузить
    магическое значение. Это поле служит для синхронизации отображения
    между смещениями образов ОС и адресами физической памяти.

load_addr
    Содержит физический адрес начала текстового сегмента. Смещение в
    файле образа ОС, с которого начинается загрузка, определяется
    смещением, при котором был найден заголовок, минус load_addr
    (header_addr - load_addr). load_addr должен быть меньше или равен
    header_addr.

load_end_addr
    Содержит физический адрес конца сегмента данных.
    (load_end_addr - load_addr) указывает объем загружаемых данных.
    Это означает, что сегменты текста и данных должны быть последовательными
    в образе ОС; это верно для существующих исполняемых форматов a.out.
    Если это поле равно нулю, загрузчик предполагает, что сегменты текста
    и данных занимают весь файл образа ОС.

bss_end_addr
    Содержит физический адрес конца сегмента bss. Загрузчик инициализирует
    эту область до нуля и резервирует занимаемую ею память, чтобы избежать
    размещения в этой области загрузочных модулей и других данных, относящихся
    к операционной системе. Если это поле равно нулю, загрузчик предполагает,
    что сегмент bss отсутствует.

entry_addr
    Физический адрес, на который должен перейти загрузчик, чтобы запустить
    операционную систему.


    3.1.4 Графические поля заголовков.

Все графические поля включены битом флага 2. Они определяют предпочтительный
графический режим. Обратите внимание, что это только рекомендуемый режим по
образу ОС. Если режим существует, загрузчик должен установить его, когда
пользователь не указывает режим явно. В противном случае загрузчик должен
перейти в аналогичный режим, если он доступен.

mode_type
    Содержит «0» для линейного графического режима или «1» для стандартного
    текстового режима EGA. Все остальное зарезервировано для будущего
    расширения. Обратите внимание, что загрузчик может установить текстовый
    режим, даже если это поле содержит «0».

wigth
    Содержит количество столбцов. Это указывается в пикселях в графическом
    режиме и в символах в текстовом режиме. Нулевое значение указывает,
    что образ ОС не имеет предпочтений.

height
    Содержит количество строк. Это указывается в пикселях в графическом
    режиме и в символах в текстовом режиме. Нулевое значение указывает,
    что образ ОС не имеет предпочтений.

depth 
    Содержит количество бит на пиксель в графическом режиме и ноль в
    текстовом режиме. Нулевое значение указывает, что образ ОС не имеет
    предпочтений.

  3.2 Состояние машины.
  
Когда загрузчик запускает 32-разрядную операционную систему, машина
должна иметь следующее состояние:

"EAX" Должен содержать магическое значение «0x2BADB002»; наличие этого
      значения указывает операционной системе, что она была загружена
      загрузчиком, совместимым с Multiboot (например, в отличие от
      загрузчика другого типа, из которого также может быть загружена
      операционная система).

"EBX" Должен содержать 32-битный физический адрес информационной
      структуры мультизагрузки, предоставляемой загрузчиком (см.
      Раздел 3.3 [Формат загрузочной информации], стр. 8).

"CS" Должен быть 32-битным сегментом кода чтения / выполнения со
     смещением «0» и пределом «0xFFFFFFFF». Точное значение не
     определено.

"DS"
"ES"
"FS"
"GS"
"SS" Должен быть 32-битным сегментом данных для чтения / записи со
     смещением «0» и пределом «0xFFFFFFFF». Все точные значения не
     определены.

"A20 gate" Должен быть включен.

"CR0" Бит 31 (PG) должен быть очищен. Бит 0 (PE) должен быть установлен.
      Все остальные биты не определены.

"EFLAGS" Бит 17 (VM) должен быть очищен. Бит 9 (IF) должен быть очищен.
         Все остальные биты не определены.

"ESP" Образ ОС должен создать свой собственный стек, как только он ему
      понадобится.

"GDTR" Несмотря на то, что регистры сегментов настроены, как описано
       выше, «GDTR» может быть недействительным, поэтому образ ОС не
       должен загружать какие-либо регистры сегментов (даже просто
       перезагружать те же значения!) До тех пор, пока он не установит
       свой собственный «GDT».

"IDTR" Образ ОС должен оставлять прерывания отключенными до тех пор,
       пока он не установит свою собственную IDT.

Тем не менее, другое состояние машины должно быть оставлено загрузчиком
в нормальном рабочем состоянии, то есть как инициализировано BIOS (или
DOS, если это то, из чего запускается загрузчик). Другими словами,
операционная система должна быть в состоянии выполнять вызовы bios и
тому подобное после загрузки, если она не перезаписывает структуры данных
bios перед этим. Кроме того, загрузчик должен оставить pic запрограммированным
с обычными значениями BIOS / DOS, даже если он изменил их во время
переключения в 32-разрядный режим.


  3.3 Формат загрузочной информации.
Читайте название раздела как "Формат образа ОС".

  После входа в операционную систему регистр EBX содержит физический
адрес структуры данных мультизагрузочной информации, через которую
загрузчик передает жизненно важную информацию операционной системе.
Операционная система может использовать или игнорировать любые части
структуры по своему выбору; вся информация, передаваемая загрузчиком,
носит рекомендательный характер.

  Информационная структура Multiboot и связанные с ней подструктуры
могут быть размещены в любом месте в памяти загрузчиком (за исключением
памяти, зарезервированной для ядра и загрузочных модулей, конечно).
Операционная система обязана не перезаписывать эту память до тех пор,
пока она не будет выполнена с ее использованием.

Формат информационной структуры мультизагрузки (как определено до сих
пор) следующий:

0     | flags             |  (required) 
__________________________________________________________
4     | mem_lower         |  (presentif flags[0] is set)     
8     | mem_upper         |  (presentif flags[0] is set)      
__________________________________________________________
12    | boot_device       |  (presentif flags[1] is set)       
__________________________________________________________
16    | cmdline           |  (presentif flags[2] is set)   
__________________________________________________________
20    | mods_count        |  (presentif flags[3] is set)       
24    | mods_addr         |  (presentif flags[3] is set)     
__________________________________________________________
28-40 | syms              |  (presentif flags[4] and 
      |                   |             flags[5] is set
__________________________________________________________
44    | mmap_length       |  (presentif flags[6] is set)       
48    | mmap_addr         |  (presentif flags[6] is set)     
__________________________________________________________
52    | drives_length     |  (presentif flags[7] is set)         
56    | drives_addr       |  (presentif flags[7] is set)       
__________________________________________________________
60    | config_tabel      |  (presentif flags[8] is set)         
__________________________________________________________
64    | boot_loader_name  |  (presentif flags[9] is set)             
__________________________________________________________
68    | apm_table         |  (presentif flags[10 ] is set)     
__________________________________________________________
72    | vbe_control_info  |  (presentif flags[11 ] is set)             
76    | vbe_mode_info     |          
80    | vbe_mode          |      
82    | vbe_interface_seg |              
84    | vbe_interface_off |              
84    | vbe_interface_len |              
__________________________________________________________

Первое длинное слово указывает на наличие и действительность других
полей в информационной структуре мультизагрузки. Все пока неопределенные
биты должны быть установлены в ноль загрузчиком. Любые установленные
биты, которые операционная система не понимает, следует игнорировать.
Таким образом, поле «flags» также функционирует как индикатор версии,
что позволяет в будущем расширять информационную структуру Multiboot,
не нарушая ничего.

Если бит 0 в слове «flags» установлен, то поля «mem_ *» являются
действительными. «Mem_lower» и «mem_upper» указывают объем нижней и
верхней памяти соответственно в килобайтах. Нижняя память начинается с
адреса 0, а верхняя память начинается с адреса 1 мегабайт.
Максимально возможное значение для нижней памяти составляет 640 килобайт.
Значение, возвращаемое для верхней памяти, является максимально адресом
первой верхней дыры памяти минус 1 мегабайт. Не гарантируется, что это
значение будет.
